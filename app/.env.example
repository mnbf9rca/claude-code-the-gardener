# ============================================================================
# CRITICAL: Data Persistence Configuration
# ============================================================================
# WARNING: The install-mcp-server.sh script DELETES the entire application
# directory during updates. You MUST configure data storage outside the app
# directory to prevent data loss.
#
# REQUIRED: Both DATA_DIR and CAMERA_SAVE_PATH must be set.
# ============================================================================

# REQUIRED: Directory for JSONL history files (plant_status, water_pump, etc.)
# Relative paths are resolved from the app directory (/home/mcpserver/plant-care-app)
# Recommended: Use ../data to store in /home/mcpserver/data (outside app dir)
DATA_DIR=../data

# REQUIRED: Directory for captured photos
# Recommended: Use ../photos to store in /home/mcpserver/photos (outside app dir)
CAMERA_SAVE_PATH=../photos

# Alternative: Use absolute paths for explicit control
# DATA_DIR=/var/lib/plant-care/data
# CAMERA_SAVE_PATH=/var/lib/plant-care/photos

# ============================================================================
# MCP Server Configuration
# ============================================================================
# Host to bind to (0.0.0.0 for all interfaces, 127.0.0.1 for localhost only)
MCP_HOST=0.0.0.0
# Port for HTTP server
MCP_PORT=8000
# Public hostname/IP for photo URLs (e.g., localhost, raspberry.local, 192.168.1.100)
MCP_PUBLIC_HOST=localhost
# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL (default: INFO)
LOG_LEVEL=INFO

# ============================================================================
# Healthcheck Configuration (Optional)
# ============================================================================
# Optional: healthchecks.io endpoint URL for MCP server uptime monitoring
# If not set, no healthcheck pings are sent
# The server will POST to this URL with a timestamp at regular intervals
# Example: https://hc-ping.com/your-uuid-here
HEALTHCHECK_URL=
# Healthcheck ping interval in seconds (default: 30)
HEALTHCHECK_INTERVAL_SECONDS=30

# ============================================================================
# Camera Configuration
# ============================================================================
# Camera Reliability Strategy:
# - Open-per-capture pattern prevents stale images between agent runs
# - Buffer flushing clears old frames from camera's internal buffer
# - Warm-up delay allows sensor to stabilize (exposure, white balance)
# - Timeout protection prevents hanging on USB/driver failures
# All settings are tunable at runtime without restarting the MCP server.
# ============================================================================

CAMERA_ENABLED=true

# USB camera index (0 for first camera, 1 for second, etc.)
# Platform-specific: On Mac use 0 or 1, on Raspberry Pi use 0 for /dev/video0, etc.
CAMERA_DEVICE_INDEX=0

# Image dimensions (pixels)
CAMERA_IMAGE_WIDTH=1920
CAMERA_IMAGE_HEIGHT=1080

# JPEG quality (1-100, higher = better quality, larger file size)
CAMERA_IMAGE_QUALITY=85

# Reliability settings:
# - Timeout per camera read operation (seconds). Protects against hanging reads.
#   Total worst case: buffer_flush_frames × timeout + final_capture × timeout
#   Example: 10 × 2s + 1 × 2s = 22 seconds maximum
CAMERA_CAPTURE_TIMEOUT=2

# - Number of frames to flush from camera buffer before capturing photo
#   Higher values = more thorough buffer clearing, but slower capture
#   Recommended: 10 for reliable fresh images
CAMERA_BUFFER_FLUSH_FRAMES=10

# - Warm-up delay after opening camera (milliseconds)
#   Allows sensor to stabilize. Recommended: 100-200ms
CAMERA_WARMUP_MS=150

# ============================================================================
# Home Assistant Configuration
# ============================================================================
HOME_ASSISTANT_URL=http://homeassistant.local:8123
HOME_ASSISTANT_TOKEN=your_long_lived_access_token_here
LIGHT_ENTITY_ID=switch.smart_plug_mini

# ============================================================================
# ESP32 Controller Configuration
# ============================================================================
# IP address or hostname of the ESP32 plant controller
ESP32_HOST=192.168.1.100
# HTTP port (default: 80)
ESP32_PORT=80
# Pump calibration: milliliters dispensed per second of pump operation
# Calibrate by running pump for 30 seconds and measuring water dispensed
# Example: 30s dispenses 27ml = 0.9 ml/s
# NOTE: ESP32 has 30s safety limit, so max dispense is ~25-27ml per event
PUMP_ML_PER_SECOND=0.9

# ============================================================================
# Email Notifications (Optional)
# ============================================================================
# Configure SMTP to receive email notifications when the agent sends you messages
# If not configured, email notifications are gracefully skipped

# REQUIRED for email notifications:
# SMTP server hostname (e.g., smtp.gmail.com, localhost)
SMTP_HOST=smtp.gmail.com
# Email address to send notifications to
SMTP_TO=recipient@example.com
# From address (must be explicitly set)
SMTP_FROM=plant-care@example.com

# OPTIONAL (only needed if SMTP server requires authentication):
# SMTP username (usually your email address)
SMTP_USER=your-email@gmail.com
# SMTP password or app-specific password
SMTP_PASSWORD=your-app-password

# OPTIONAL (advanced):
# SMTP port (default: 587 for STARTTLS, 25 for plain SMTP)
SMTP_PORT=587
# Use STARTTLS (default: true for port 587, false for port 25)
SMTP_USE_TLS=true
